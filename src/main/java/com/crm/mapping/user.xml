<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
	"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
  <mapper namespace="com.crm.dao.UserDao">
  <!--  
  	<cache type="com.crm.util.RedisCache" />
  -->
	<resultMap type="com.crm.model.User" id="userMap">
		<id property="userId" column="user_id" />
		<result property="userName" column="user_name" />
		<result property="userPassword" column="user_password" />		
		<result property="userMotto" column="user_motto" />		
		<result property="userIcon" column="user_icon" />		
		<result property="userEmail" column="user_email" />		
		<result property="userIntro" column="user_intro" />		
		<result property="userSex" column="user_sex" />		
	</resultMap>
  	<resultMap type="com.crm.util.UserUtil" id="userUtilMap">
  		<result property="userId" column="user_id" />
  		<result property="userName" column="user_name" />
  		<result property="userMotto" column="user_motto" />
  		<result property="userIcon" column="user_icon" />
  		<result property="userIntro" column="user_intro" />
  		<result property="userSex" column="user_sex" />
  	</resultMap>
  	<resultMap type="com.crm.util.HomeUserUtil" id="recommendUserMap">
  		<result property="userId" column="user_id" />
  		<result property="userName" column="user_name" />
  		<result property="userIcon" column="user_icon" />
  		<result property="numOfPoem" column="num_of_poem" />
  		<result property="numOfConcern" column="num_of_concern" />
  	</resultMap>
	<sql id="userColumns">
		user_id,user_name,user_password,user_motto,user_icon,user_email,user_intro,user_sex
	</sql>
	<sql id="userUtilColumns">
		user_id,user_name,user_motto,user_icon,user_intro,user_sex
	</sql>
	
	<insert id="insertUser" parameterType="com.crm.model.User">
		insert into MP_user(user_name,user_email,user_password)
		values(#{userName},#{userEmail},#{userPassword})
	</insert>
	
	<select id="getUserByEmail" parameterType="String" resultMap="userMap">
		select <include refid="userColumns" /> from MP_user
		where user_email=#{_parameter}
	</select>
	
	<update id="updateUserIcon">
		update MP_user set user_icon=#{1}
		where user_id=#{0}
	</update>
	
	<update id="updateUserIntro">
		update MP_user set user_intro=#{1}
		where user_id=#{0}
	</update>
	
	<update id="updateUserMotto">
		update MP_user set user_motto=#{1}
		where user_id=#{0}
	</update>
	
	<update id="updateUserPass">
		update MP_user set user_password=#{1}
		where user_id=#{0}
	</update>
	
	<update id="updateUserSexById">
		update MP_user set user_sex=#{1}
		where user_id=#{0}
	</update>
	
	<select id="getUserUtilById" resultMap="userUtilMap">
		select <include refid="userUtilColumns" /> from MP_user
		where user_id=#{0}
	</select>
	
	<select id="getConcernUserListById" resultMap="userMap">
		select user_id,user_name,user_icon,user_sex from MP_user,MP_concern
		where concerner_id=#{0} and user_id=concerned_id limit 0,#{1}
	</select>
	
	<select id="getFansListById" resultMap="userMap">
		select user_id,user_name,user_icon,user_sex from MP_user,MP_concern
		where concerned_id=#{0} and user_id=concerner_id limit 0,#{1}
	</select>
	
	<select id="getRecommendUsers" resultMap="recommendUserMap">
		select user_id,user_icon,user_name,num_of_poem,count(c.concerner_id) as num_of_concern
		from (select  u.user_id,u.user_icon,u.user_name,count(p.poem_id) as num_of_poem
		from MP_user u,MP_poem p
		where u.user_id=p.user_id
        group by user_id
        order by num_of_poem) as n,MP_concern as c
        where n.user_id=c.concerned_id
        group by user_id
        order by num_of_concern desc,num_of_poem desc;
	</select>
</mapper>
